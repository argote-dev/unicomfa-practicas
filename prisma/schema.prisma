generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int              @id @default(autoincrement())
  email              String           @unique
  num_document       String           @unique
  name               String
  last_name          String
  address            String
  birth_date         String
  password           String
  idProgram          Int?
  program            Program?         @relation(fields: [idProgram], references: [id])
  create_at          DateTime         @default(now())
  idCompamy          Int?
  company            Company?         @relation(fields: [idCompamy], references: [id])
  idTypeDocument     Int
  typeDocumet        TypeDocument     @relation(fields: [idTypeDocument], references: [id])
  idTypeMunicipality Int
  typeMunicipality   TypeMunicipality @relation(fields: [idTypeMunicipality], references: [id])
  idTypeUser         Int
  typeUser           TypeUser         @relation(fields: [idTypeUser], references: [id])
  UserOnProcess      UserOnProcess[]
  Document           Document[]
}

model Document {
  id           Int          @id @default(autoincrement())
  url          String
  date         DateTime
  typeId       Int
  typeDocument TypeDocument @relation(fields: [typeId], references: [id])
  userId       Int
  user         User         @relation(fields: [userId], references: [id])
}

model TypeDocument {
  id       Int        @id @default(autoincrement())
  name     String
  Document Document[]
  User     User[]
}

model Process {
  id              Int               @id @default(autoincrement())
  aproved         Boolean
  typeId          Int
  typeProcess     TypeProcess       @relation(fields: [typeId], references: [id])
  statusProcessId Int
  statusProcess   StatusProcess     @relation(fields: [statusProcessId], references: [id])
  ProcessOnReturn ProcessOnReturn[]
  UserOnProcess   UserOnProcess[]
}

model UserOnProcess {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  processId Int
  process   Process @relation(fields: [processId], references: [id])
}

model TypeProcess {
  id      Int       @id @default(autoincrement())
  name    String
  Process Process[]
}

model Return {
  id              Int               @id @default(autoincrement())
  description     String
  ProcessOnReturn ProcessOnReturn[]
}

model StatusProcess {
  id      Int       @id @default(autoincrement())
  name    String
  Process Process[]
}

model ProcessOnReturn {
  id        Int      @id @default(autoincrement())
  processId Int
  process   Process  @relation(fields: [processId], references: [id])
  returnId  Int
  return    Return   @relation(fields: [returnId], references: [id])
  createAt  DateTime @default(now())
}

model Program {
  id        Int     @id @default(autoincrement())
  name      String
  idFaculty Int
  faculty   Faculty @relation(fields: [idFaculty], references: [id])
  User      User[]
}

model Faculty {
  id      Int       @id @default(autoincrement())
  name    String
  Program Program[]
}

model Company {
  id               Int    @id @default(autoincrement())
  nit              Int
  name             String
  date_association String
  address          String
  phone            Int
  email            String
  User             User[]
}

model TypeUser {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model TypeMunicipality {
  id               Int            @id @default(autoincrement())
  name             String
  typeDepartmentId Int
  typeDepartment   TypeDepartment @relation(fields: [typeDepartmentId], references: [id])
  User             User[]
}

model TypeDepartment {
  id               Int                @id @default(autoincrement())
  name             String
  TypeMunicipality TypeMunicipality[]
}
